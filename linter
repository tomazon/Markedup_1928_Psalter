#! env perl

use strict;
use warnings;

use File::Slurp;
use YAML;

use feature 'say';


my $in_file  = "./yaml/psalms.yaml";
my $data = YAML::LoadFile($in_file);
my $current_psalm_num = 34;


for my $psalm_num (sort keys %{$data->{psalm}}) {
    my $psalm = $data->{psalm}->{$psalm_num};
    for my $part_num (sort keys %{$psalm->{part}}) {
        my $part = $psalm->{part}->{$part_num};
        for my $verse_num (sort keys %{$part->{verse}}) {
            check_verse($data, $psalm_num, $part_num, $verse_num);
        }
    }

}

################################################################################

sub check_verse {
    my ($data, $psalm_num, $part_num, $verse_num) = @_;
    my $text = fetch_verse_text($data, $psalm_num, $part_num, $verse_num);
    #say "$psalm_num:$verse_num - $text";
    show_invalid_angle_tags($psalm_num, $verse_num, $text);
    check_ed_issues($psalm_num, $verse_num, $text);
}

sub fetch_verse_text {
    my ($data, $psalm_num, $part_num, $verse_num) = @_;
    $data->{psalm}->{$psalm_num}->{part}->{$part_num}->{verse}->{$verse_num};
}


sub show_invalid_angle_tags {
    my ($psalm_num, $verse_num, $text) = @_;
    my $tmp = $text;;

    for my $tag (qw( SC DS DA BR br DP TETRAGRAMMATON DIGRAMMATON )) {
        $tmp =~ s/<${tag}>/%%%/g;
        $tmp =~ s/<${tag} [^>]+>/%%%/g;
        $tmp =~ s/<\/${tag}>/%%%/g;
    }
    report ($psalm_num, $verse_num, '<__>', $tmp) if $tmp =~ /[<>]/;
}

sub check_ed_issues {
    my ($psalm_num, $verse_num, $text) = @_;

    report ($psalm_num, $verse_num, '_ed', $text) if $text =~ /_ed/;
    ##report ($psalm_num, $verse_num, '*ed', $text) if $text =~ /[a-z]ed\b/ && $psalm_num < $current_psalm_num;
}

sub report {
    my ($psalm_num, $verse_num, $issue, $text) = @_;

    say sprintf ("%3s:%3s | %-10s | %s\n", $psalm_num, $verse_num, $issue, $text);
}

__END__

my @lines;
while (my $line = (<>)) {
    $line =~ s/\s+$//;
    push(@lines, $line);
}

my $line_no = 0;
for my $line (@lines) {
    $line_no++;
    next if $line =~ /verse_history_refs:/;

    say "$line_no | no comma  | $line" if $line =~ /\{wc\}[^,]/;
    #say "$line_no | no {dc}   | $line" if $line =~ /[^d][^c][^}]\{wc\}/;
    say "$line_no | no , or } | $line" if $line =~ /\{wc\}[^,{]/;
    say "$line_no | yea{}     | $line" if $line =~ /yea\[/i;
    say "$line_no | {,}       | $line" if $line =~ /\{[^}]*\,[^]]*}/i;
    say "$line_no | <,>       | $line" if $line =~ /<[^>]*\,[^>]*>/i;
    #say "$line_no | <@>       | $line" if $line =~ /<[^>]*\@[^>]*>/i;
    #say "$line_no | <DS>      | $line" if $line =~ /DS/;
    #say "$line_no | <__>      | $line" if $line =~ m{</*[^DS]};
    #say "$line_no | <__>      | $line" if $line =~ /<\/?[^DS][^SCA][^\s>]/;
    #say "$line_no | <__>      | $line" if $line =~ /<[^SD][^SC][^ >]/ || $line =~ /<\/[^SD][^SC]>/;
    #say "$line_no | <__>      | $line" if $line =~ /<[^SD][^SC][ >][^<]+<\\[SD][SC]>/;

    show_invalid_angle_tags($line);
    show_invalid_curly_tags($line);
}

say "Checking for YAML errors...\n";
YAML::Load(join("\n", @lines));

sub show_invalid_angle_tags {
    my ($line) = @_;
    my $tmp = $line;

    for my $tag (qw( SC DS DA BR br DP TETRAGRAMMATON DIGRAMMATON )) {
        $tmp =~ s/<${tag}>/%%%/g;
        $tmp =~ s/<${tag} [^>]+>/%%%/g;
        $tmp =~ s/<\/${tag}>/%%%/g;
    }
    say "$line_no | <__>      | $tmp" if $tmp =~ /</ || $tmp =~ />/;
}

sub show_invalid_curly_tags {
    my ($line) = @_;
    my $tmp = $line;

    $tmp =~ s/\{HN [v#x][\d\.]+\}/%%%/g;
    for my $tag (qw( d\. dc d- wc wp df dv d_ d- \. dx - )) {
        $tmp =~ s/\{$tag\}/%%%/g;
    }
    say "$line_no | {__}     | $tmp" if $tmp =~ /{/ || $tmp =~ /}/;
}
##. rg '<\/?[DS][^SC]( [^>]+)?>' yaml/psalms.yaml
##  rg '<\/?(DS|SC)( [^>]+)?>' yaml/psalms.yaml

